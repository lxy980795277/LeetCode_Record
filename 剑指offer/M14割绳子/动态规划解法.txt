class Solution {
    public int cuttingRope(int n) {
        //动态规划解法
        //1、dp[i]表示 乘数为i的最大积 例如6可以表示为dp[3]*dp[3]
        //2、递推公式 dp[6] = max(dp[1]*dp[5],dp[2]*dp[4],dp[3]*dp[3])
        //3、dp[i]初始化 dp[1] =1 dp[2] =2 dp[3] = 3
        //注意这里有所区别，这里的dp[3]指的是3作为因子，但如果n=3，那最大乘积应该为2 因为3=1+2
        //4、dp数组的范围 从1到n
        //5、dp数组举例 dp[6] = max(dp[1]*dp[5],dp[2]*dp[4],dp[3]*dp[3]) 
        if(n<=3){
            return n-1;
        }
        int[] dp = new int[n+1];
        dp[1] = 1;
        dp[2] = 2;
        dp[3] = 3;
        for(int i =4;i<=n;i++){
            dp[i] = 1;
            for(int j =1;j<i;j++){
                dp[i] = Math.max(dp[i],dp[j]*dp[i-j]);
            }
        }
        return dp[n];
    }
}