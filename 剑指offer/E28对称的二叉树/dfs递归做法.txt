/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    //dfs递归做法
    //判断一颗树是否是镜像，需要判断这颗树的每一颗子树是否为镜像
    //递归三部曲
    //1、确定递归函数的意义 判断本次判断的两个节点是否构成镜像
    //2、递归停止的条件 当前判断的两个节点都为叶子节点时，则返回true
    //当前的两个节点的val不相等，或者一个为null另一个不为null，则返回false
    //3、递归进入下一层的条件 当前两个节点的val相等，且均不为叶子节点 
    //则需要同时判断这两个节点的 左右和右左，左左和右右是否相同
    public boolean isSymmetric(TreeNode root) {
        if(root == null){
            return true;
        }
        return dfs(root.left,root.right);
    }

    public boolean dfs(TreeNode left,TreeNode right){
        if(left == null && right == null){
            return true;
        }
        if((left==null&&right!=null) || (right==null && left!=null) || left.val!=right.val){
            return false;
        }
        return dfs(left.left,right.right) && dfs(left.right,right.left);
    }
}