// 保持堆的大小为K，然后遍历数组中的数字，遍历的时候做如下判断：
// 1. 若目前堆的大小小于K，将当前数字放入堆中。
// 2. 否则判断当前数字与大根堆堆顶元素的大小关系，如果当前数字比大根堆堆顶还大，这个数就直接跳过；
//    反之如果当前数字比大根堆堆顶小，先poll掉堆顶，再将该数字放入堆中。
class Solution {
    public int[] getLeastNumbers(int[] arr, int k) {
        if (k == 0 || arr.length == 0) {
            return new int[0];
        }
        // 默认是小根堆，实现大根堆需要重写一下比较器。
        Queue<Integer> queue = new PriorityQueue<>((v1, v2) -> v2 - v1);
        for(int i =0;i<k;i++){
            queue.add(arr[i]);
        }
        for(int j=k;j<arr.length;j++){
            int top = queue.peek();
            if(arr[j] < top){
                queue.poll();
                queue.add(arr[j]);
            }
        }
        int [] res = new int[k];
        for(int m = 0;m<k;m++){
            res[m] = queue.poll();
        }
        return res;
    }
}