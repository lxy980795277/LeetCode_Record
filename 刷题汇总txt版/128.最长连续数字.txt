class Solution {
//哈希表的做法
//首先先遍历nums数组，将其全部添加进hashmap中，这样的做法同时也对数组进行了去重处理
//之后，遍历hash表，判断当前数字的前驱是否存在，
//例如当前遇到了数字3，则需要判断3的前驱数字2是否在数组中，如果在数组中，
//说明3是一个连续的数组，否则说明3是一个连续数字的开头
//然后只需要从3这个点开始，依次判断3的后继数字4,5,6...是否存在即可。
//由于提前判断了它的前驱节点是否在数组中，因此每个数字最多只会被访问2次
//即containsKey访问一次，while内访问一次，时间复杂度为O(2n)
//满足题目意思
    public int longestConsecutive(int[] nums) {
        int len = nums.length;
        HashMap <Integer,Integer> map = new HashMap<>();
        for(int i =0;i<len;i++){
            map.put(nums[i],i);
        }
        int max = 0;
        for(Integer key:map.keySet()){
            int num = 0;
            if(!map.containsKey(key-1)){
                int y = key;
                while(map.containsKey(y)){
                    y++;
                }
                num = y-key;
                max = num>max?num:max;
            }
        }
        return max;
    }
}